name: Append Dynamic Object to JSON File

on:
  workflow_dispatch:
    inputs:
      file:
        description: "Path to the JSON file (e.g., data/users.json)"
        required: true
      id:
        description: "ID for the new object (use 'auto' to auto-increment)"
        required: true
      object:
        description: "JSON object to append (as string)"
        required: true

jobs:
  append-json:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Ensure data folder exists
      run: mkdir -p data

    - name: Fetch, Merge, and Update
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        FILE_PATH="${{ github.event.inputs.file }}"
        INPUT_ID="${{ github.event.inputs.id }}"
        RAW_OBJECT='${{ github.event.inputs.object }}'

        # Fetch file from repo or create blank
        RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/contents/$FILE_PATH)

        if echo "$RESPONSE" | jq -e .message | grep -q "Not Found"; then
          echo "[]" > current.json
          SHA=""
        else
          echo "$RESPONSE" | jq -r .content | base64 -d > current.json
          SHA=$(echo "$RESPONSE" | jq -r .sha)
        fi

        # Generate or accept ID
        if [ "$INPUT_ID" = "auto" ]; then
          NEXT_ID=$(jq 'map(.id) | max + 1' current.json 2>/dev/null || echo 1)
        else
          NEXT_ID="$INPUT_ID"
        fi

        echo "Using ID: $NEXT_ID"

        # Check for existing ID
        DUPLICATE=$(jq --argjson id "$NEXT_ID" 'any(.[]; .id == $id)' current.json)
        if [ "$DUPLICATE" = "true" ]; then
          echo "❌ ID $NEXT_ID already exists. Skipping."
          exit 1
        fi

        # Build full object with merged structure
        echo "$RAW_OBJECT" | jq --argjson id "$NEXT_ID" '. + {id: $id}' > new_object.json

        # Append to array
        jq --slurpfile newObj new_object.json '. + $newObj' current.json > updated.json

        # Encode final result
        UPDATED_BASE64=$(base64 -w 0 updated.json)

        # Commit to GitHub
        echo "{
          \"message\": \"Append dynamic object to $FILE_PATH\",
          \"content\": \"$UPDATED_BASE64\",
          \"sha\": \"$SHA\"
        }" > body.json

        curl -X PUT \
          -H "Authorization: token $GH_TOKEN" \
          -H "Content-Type: application/json" \
          --data @body.json \
          https://api.github.com/repos/${{ github.repository }}/contents/$FILE_PATH

    - name: Notify Firebase
      env:
        FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
        FIREBASE_AUTH: ${{ secrets.FIREBASE_AUTH }}
        FILE_PATH: ${{ github.event.inputs.file }}
        NEXT_ID: ${{ github.event.inputs.id }}
        OBJ: ${{github.event.inputs.object}}
      run: |
        curl -X PUT "$FIREBASE_DB_URL/github-actions/lastUpdate.json?auth=$FIREBASE_AUTH" \
          -H "Content-Type: application/json" \
          -d '{
                "fileUpdated": "'"$FILE_PATH"'",
                "status": "completed",
                "timestamp": "'"$(date -u +%FT%TZ)"'",
                "id": "'"$NEXT_ID"'",
                "obj": "'"$github.event.inputs.object"'",
              }'
